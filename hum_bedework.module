<?php

require_once('iCalcreator.class.php');

define('HUM_BEDEWORK_DEFAULT_MAIN_STYLE', 'table');

define('HUM_BEDEWORK_DEFAULT_MAIN_DATE_FORMAT','F d, Y');
define('HUM_BEDEWORK_DEFAULT_MAIN_TIME_FORMAT','h:i A');
define('HUM_BEDEWORK_DEFAULT_TEASER_DATE_FORMAT','D, M. d');
define('HUM_BEDEWORK_DEFAULT_TEASER_TIME_FORMAT','h:i A');
define('HUM_BEDEWORK_DEFAULT_MAIN_END_TIME_DISPLAY', FALSE);

define('HUM_BEDEWORK_DEFAULT_MAIN_DESC_TRIM','200');
define('HUM_BEDEWORK_DEFAULT_MAIN_EVENT_COUNT','30');
define('HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY', '0');
define('HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY_RANGE', '0.1');
define('HUM_BEDEWORK_DEFAULT_TEASER_EVENT_COUNT','5');
define('HUM_BEDEWORK_DEFAULT_TEASER_STYLE','list');

define('HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH', 'calendar');

define('HUM_BEDEWORK_DEFAULT_MONTH', get_date_part('month'));
define('HUM_BEDEWORK_DEFAULT_YEAR', get_date_part('year'));

/**
 * Implements hook_help
 *
 * Displays help and module information
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function hum_bedework_help($path, $arg) {
  switch ($path) {
    case "admin/help#hum_bedework":
      return '<p>' . t("Test Test") . '</p>';
  }
}

/**
 * Implements hook_menu()
 */
function hum_bedework_menu() {
  $items = array();

  $items['admin/config/content/hum_bedework'] = array(
    'title' => 'Bedework Config',
    'description' => 'Configuration for Bedework module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hum_bedework_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $calendar_path = variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH);

  $items[$calendar_path] = array(
    'title' => 'Calendar',
    'page callback' => 'hum_bedework_main_page',
    'access arguments' => array('access content'),
  );

  $items[$calendar_path.'/%/%'] = array(
    'title' => 'Calendar',
    'page callback' => 'hum_bedework_main_page',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
  );

  return $items;
}


/**
 * Page callback: Bedework settings
 *
 * @see hum_bedework_menu
 */
function hum_bedework_form($form, &$form_state) {
  $form['hum_bedework_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Bedework API Key'),
    '#default_value' => variable_get('hum_bedework_api_key',""),
    '#size' => 32,
    '#description' => t('The API key to use for the bedework widget request.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main'] = array (
    '#type' => 'fieldset',
    '#title' => t('Main Calendar Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['hum_bedework_main']['hum_bedework_main_widget_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Bedework Widget Id'),
    '#default_value' => variable_get('hum_bedework_main_widget_id',""),
    '#size' => 5,
    '#description' => t('The iCal widget id to use for the main calendar.'),
    '#required' => TRUE,
  );

  $main_styles = array('table'=>'Table','month'=>'Month');
  $form['hum_bedework_main']['hum_bedework_main_style'] = array(
    '#type' => 'select',
    '#title' => t('Main Calendar Style'),
    '#default_value' => variable_get('hum_bedework_main_style',HUM_BEDEWORK_DEFAULT_MAIN_STYLE),
    '#options' => $main_styles,
    '#description' => t('The style to use for the main calendar.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_calendar_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Main Calendar Path'),
    '#default_value' => variable_get('hum_bedework_main_calendar_path',HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH),
    '#size' => 32,
    '#description' => t('The path to the page that displays the main calendar, and the base path for event detail pages. Clear cache after you change this.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_event_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Count'),
    '#default_value' => variable_get('hum_bedework_main_event_count',HUM_BEDEWORK_DEFAULT_MAIN_EVENT_COUNT),
    '#size' => 5,
    '#description' => t('The maximum number of future events to display on the main calendar.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_event_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Events to Display'),
    '#default_value' => variable_get('hum_bedework_main_event_display',HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY),
    '#size' => 5,
    '#description' => t('About how many events should display at a time. Note that this is not an exact number. 
      Set to 0 if desire to have events display strictly by month.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_event_display_range'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Display Range'),
    '#default_value' => variable_get('hum_bedework_main_event_display_range',HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY_RANGE),
    '#size' => 5,
    '#description' => t('Set the range (decimal value) for how precise Number of Events to Display should be
      in the case of not enough events in a single month.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_desc_trim'] = array(
    '#type' => 'textfield',
    '#title' => t('Description Trim'),
    '#default_value' => variable_get('hum_bedework_main_desc_trim',HUM_BEDEWORK_DEFAULT_MAIN_DESC_TRIM),
    '#size' => 5,
    '#description' => t('The maximum number of characters to show for descriptions on the main calendar.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_date_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Format'),
    '#default_value' => variable_get('hum_bedework_main_date_format',HUM_BEDEWORK_DEFAULT_MAIN_DATE_FORMAT),
    '#size' => 40,
    '#description' => t('Date format to use for the main calendar. See php date formats for more info.'),
    '#required' => TRUE,
  );
  $form['hum_bedework_main']['hum_bedework_main_time_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Time Format'),
    '#default_value' => variable_get('hum_bedework_main_time_format',HUM_BEDEWORK_DEFAULT_MAIN_TIME_FORMAT),
    '#size' => 40,
    '#description' => t('Time format to use for the main calendar. See php time formats for more info.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_main']['hum_bedework_main_end_time_display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display End Time'),
    '#default_value' => variable_get('hum_bedework_main_end_time_display',HUM_BEDEWORK_DEFAULT_MAIN_END_TIME_DISPLAY),
    '#description' => t('Check the box to enable event end time display.'), 
  );

  $form['hum_bedework_teaser'] = array (
    '#type' => 'fieldset',
    '#title' => t('Teaser Block Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['hum_bedework_teaser']['hum_bedework_teaser_widget_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Bedework Widget Id'),
    '#default_value' => variable_get('hum_bedework_teaser_widget_id',""),
    '#size' => 5,
    '#description' => t('The iCal widget id to use for the calendar teaser.'),
    '#required' => TRUE,
  );
  
  $teaser_styles = array('table'=>'Table','list'=>'List');
  $form['hum_bedework_teaser']['hum_bedework_teaser_style'] = array(
    '#type' => 'select',
    '#title' => t('Teaser Style'),
    '#default_value' => variable_get('hum_bedework_teaser_style',HUM_BEDEWORK_DEFAULT_TEASER_STYLE),
    '#options' => $teaser_styles,
    '#description' => t('The style to use for the calendar teaser.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_teaser']['hum_bedework_teaser_event_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Count'),
    '#default_value' => variable_get('hum_bedework_teaser_event_count',HUM_BEDEWORK_DEFAULT_TEASER_EVENT_COUNT),
    '#size' => 5,
    '#description' => t('The maximum number of future events to display on the calendar teaser.'),
    '#required' => TRUE,
  );

  $form['hum_bedework_teaser']['hum_bedework_teaser_date_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Format'),
    '#default_value' => variable_get('hum_bedework_teaser_date_format',HUM_BEDEWORK_DEFAULT_TEASER_DATE_FORMAT),
    '#size' => 40,
    '#description' => t('Date format to use for the calendar teaser. See php date formats for more info.'),
    '#required' => TRUE,
  );
  $form['hum_bedework_teaser']['hum_bedework_teaser_time_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Time Format'),
    '#default_value' => variable_get('hum_bedework_teaser_time_format',HUM_BEDEWORK_DEFAULT_TEASER_TIME_FORMAT),
    '#size' => 40,
    '#description' => t('Time format to use for the calendar teaser. See php time formats for more info.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function hum_bedework_block_info() {
  $blocks['hum_bedework_main'] = array(
    'info' => t('Bedework main calendar block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['hum_bedework_teaser'] = array(
    'info' => t('Bedework teaser block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block
 */
function hum_bedework_block_view($delta = '') {
  $block['subject'] = '';
  switch($delta){
    case 'hum_bedework_main':
    $block['subject'] = t('Main Calendar');
    if (user_access('access content')) {
      switch (variable_get('hum_bedework_main_style',HUM_BEDEWORK_DEFAULT_MAIN_STYLE)) {
        case 'table':
          $block['content'] = theme('table',hum_bedework_block_generate_main());
          break;
        case 'month':
          $block['content'] = theme('table',hum_bedework_block_generate_main_month());
          break;
      }
    }
      break;
    case 'hum_bedework_teaser':
      $block['subject'] = t('Featured Events');
      if (user_access('access content')) {
        switch (variable_get('hum_bedework_teaser_style',HUM_BEDEWORK_DEFAULT_TEASER_STYLE)) {
          case 'table':
            $table_array = hum_bedework_block_generate_teaser_table();
            $block['content'] = theme('table', $table_array);
            $block['attributes']['has_no_events'] = empty($table_array['items']);
            break;
          case 'list':
            $list_array = hum_bedework_block_generate_teaser_list();
            $block['content'] = theme('item_list', $list_array);
            $block['attributes']['has_no_events'] = empty($list_array['items']);
            break;
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_preprocess_block()
 *
 * Adds CSS classes to block.
 */
function hum_bedework_preprocess_block(&$variables) {
  //var_dump($variables);
  if ($variables['block']->module == 'hum_bedework' && $variables['block']->delta == 'hum_bedework_teaser') {
    if (property_exists($variables['block'],'attributes') && $variables['block']->attributes['has_no_events'] == TRUE) {
      $variables['classes_array'][] = drupal_html_class('bedework-empty-teaser');
    }
  }
}

function cmp_date($d1, $d2) {
  if ($d1['st_ts'] == $d2['st_ts']) {
    return 0;
  }
  return ($d1['st_ts'] < $d2['st_ts']) ? -1 : 1;
}

function cmp_date_ongoing($d1, $d2) {
  $date1 = date_parse_from_format('F d, Y', $d1['0']['sdate']);
  $date2 = date_parse_from_format('F d, Y', $d2['0']['sdate']);
  $day1 = $date1['day'];
  $day2 = $date2['day'];
  $m1 = $date1['month'];
  $m2 = $date2['month'];
  $y1 = $date1['year'];
  $y2 = $date2['year'];

  if ($day1 == $day2 && $m1 == $m2 && $y1 == $y2) {
    return 0;
  }
  return ($m1 < $m2 && $y1 <= $y2 || $day1 < $day2 && $m1 == $m2 && $y1 == $y2) ? -1 : 1;
}

/**
 *
 */
function hum_bedework_block_generate_main_month() {
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));
  $m = HUM_BEDEWORK_DEFAULT_MONTH;

  $table = array(
    'header' => array(
      'Date',
      'Time',
      'Title / Location'
    ),
    'rows' => array(),
    'empty' => 'No Events Found'
  );
  
  $prev_date = null;
  $curr_events = array();

  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_main_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'main');
    $date = $timevals['sdate_dur'];
    
    $datevals = (date_parse_from_format('F d, Y', $date));
    $month = $datevals['month']; //returns numerical representation of month (1-12)
    if ($month == $m) {
      //add this event to our list
      array_push($curr_events, $cal);
    }
  }
  //sort events for current month
  uasort($curr_events, 'cmp_date');

  foreach ($curr_events as $event) {
    $timevals = hum_bedework_sanitize_time($event,'main');
    $time = $timevals['time'];
    $date = $timevals['sdate_dur']; 

    if ($date != $prev_date) {
        $printDate = array('data'=>"<span class='bedework_date'>$date</span>",'class'=>'bedework_datetime');
      } else {
        $printDate = null;
      }

    $table['rows'][] = array(
        'data' => array(
          $printDate,
          array(
            'data'=>"<span class='bedework_time'>$time</span>",
            'class'=>'bedework_datetime'
          ),
          hum_bedework_generate_event_link($event).'<br />'.$event['location']
        )
      );

    $prev_date = $date;
  }
  
  return $table;
}

/**
 *
 */
function hum_bedework_block_generate_main() {
  //print_r('hum_bedework_block_generate_main() called');
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));

  $table = array(
    'header' => array(
      'Date / Time',
      'Title / Location',
      'Description'
    ),
    'rows' => array(),
    'empty' => 'No Events Found'
  );
        
  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_main_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'main');
  
    $time = $timevals['time'];
    $date = $timevals['sdate_dur'];

    $desc = str_replace("\\n","<br />",mb_substr($cal['description'],0,variable_get('hum_bedework_main_desc_trim',"200"),'utf-8'))
            . (mb_strlen($cal['description'],'utf-8') > variable_get('hum_bedework_main_desc_trim',"200") ? "..." : "");

    $table['rows'][] = array(
      'data' => array(
        array(
          'data'=>"<span class='bedework_date'>$date</span><br /><span class='bedework_time'>$time</span>",
          'class'=>'bedework_datetime'
        ),
        hum_bedework_generate_event_link($cal).'<br />'.$cal['location'],
        $desc
      )
    );
  }

  return $table;
}



/**
 * Generates a teaser table data array suitable for passing to theme_table
 */
function hum_bedework_block_generate_teaser_table() {
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));

  $table = array(
    'header' => array(),
    'rows' => array(),
    'empty' => 'No Events Found'
  );
        
  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_teaser_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'teaser');
    $time = $timevals['time']; 
    $date = $timevals['sdate']; 

    $table['rows'][] = array(
      'data' => array(
        array(
          'data'=>"$date",
          'class'=>array('bedework_datetime')
        ),
        array(
          'data'=>"<span class='bedework_title'>".hum_bedework_generate_event_link($cal)."</span><br /><span class='bedework_time'>$time</span><br /><span class='bedework_location'>{$cal['location']}</span>",
          'class'=>array('bedework_titlelocation'),
        )
      ),
      'class'=>array('bedework_event'),
    );
  }
  
  if (count($table['rows']) > 0) {
      $table['rows'][] = array(
        'data' => array(
            array(
                'data'=>l("More",variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH)),
                'colspan'=>2
            )
        ),
        'class' => array('bedework_more')
      );
  }

  return $table;
}

/**
 *
 */
function hum_bedework_sanitize_time($cal,$type) {
    $ret = array();

    if ($cal['st_exists']) {
        if ($type == 'teaser') {
            $ret['stime'] = date(variable_get('hum_bedework_teaser_time_format',HUM_BEDEWORK_DEFAULT_TEASER_TIME_FORMAT), $cal['st_ts']);
            $ret['sdate'] = date(variable_get('hum_bedework_teaser_date_format',HUM_BEDEWORK_DEFAULT_TEASER_DATE_FORMAT), $cal['st_ts']);
        } else {
            $ret['stime'] = date(variable_get('hum_bedework_main_time_format',HUM_BEDEWORK_DEFAULT_MAIN_TIME_FORMAT), $cal['st_ts']);
            $ret['sdate'] = date(variable_get('hum_bedework_main_date_format',HUM_BEDEWORK_DEFAULT_MAIN_DATE_FORMAT), $cal['st_ts']);
        }
    } else {
        $ret['stime'] = "N/A";
        $ret['sdate'] = "N/A";
    }

    if ($cal['et_exists']) {
        if ($type == 'teaser') {
            $ret['etime'] = date(variable_get('hum_bedework_teaser_time_format',HUM_BEDEWORK_DEFAULT_TEASER_TIME_FORMAT), $cal['et_ts']);
            $ret['edate'] = date(variable_get('hum_bedework_teaser_date_format',HUM_BEDEWORK_DEFAULT_TEASER_DATE_FORMAT), $cal['et_ts_adj']);
        } else {
            $ret['etime'] = date(variable_get('hum_bedework_main_time_format',HUM_BEDEWORK_DEFAULT_MAIN_TIME_FORMAT), $cal['et_ts']);
            $ret['edate'] = date(variable_get('hum_bedework_main_date_format',HUM_BEDEWORK_DEFAULT_MAIN_DATE_FORMAT), $cal['et_ts_adj']);
        }
    } else {
        $ret['etime'] = "N/A";
        $ret['edate'] = "N/A";
    }

    if ($cal['allday']) {
        $ret['time'] = "All Day";
    } else if ($cal['st_exists'] && $cal['et_exists']) {
        if ($cal['samedate'] && $cal['sametime']) {
            $ret['time'] = $ret['stime'];
        } else {
            $ret['time'] = $ret['stime'] . " - " . $ret['etime'];
        }
    } else if ($cal['st_exists'] && !$cal['et_exists']) {
        $ret['time'] = $ret['stime'];
    } else {
        $ret['time'] = "N/A";
    }

    if ($cal['samedate']) {
        $ret['duration'] = $ret['stime'];
        $ret['sdate_dur'] = $ret['sdate'];
        $ret['duration_datetime'] = $ret['sdate'] . " " . $ret['stime'];
    } else {
        $ret['duration'] = $ret['stime'] . " - " . $ret['edate'];
        $ret['sdate_dur'] = "Begins {$ret['sdate']}"; 

        if ($cal['allday']) {
          $ret['duration_datetime'] = "{$ret['sdate']} - {$ret['edate']} (All Day)";
        } else {
          $ret['duration_datetime'] = "{$ret['sdate']} {$ret['stime']} - {$ret['edate']} {$ret['etime']}";
        }
    }

    return $ret;
}

/**
 * Routes to the internal link if event url points to our site. Otherwise to our event detail page.
 * @param a bedework calendar event array
 * @return the output of the internal link generator
 */
function hum_bedework_generate_event_link($cal) {
  // Set the default path to start with.
  $calendar_path = variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH);
  $event_path = $calendar_path.'/details/'.urlencode($cal['uid']);

  if ( !empty($cal['url']) ) {
    // Has a URL
    $event_url = parse_url($cal['url']);
    //drupal_set_message("Event: " . $cal['title'] . " URL:" . $cal['url'], 'warning');

    if ( $event_url && isset($event_url['host']) ) {   // Has a host
      $site_host = parse_url($GLOBALS['base_root'], PHP_URL_HOST); 
      if ($site_host) {   // If we can find our base path
        $site_host = str_replace("-test", "", $site_host);    // Correct for dev hosts
        $event_host = str_replace("-test", "", $event_url['host']);

        if ( strcasecmp($site_host, $event_host) == 0 ) {   // If we're linking to our host
          if ( $event_url['path'] ) {   // And we have a path
            $event_path = $event_url['path'];   // Then let's link to the local event page.
          }
        }
      }
    }
  }
  if($event_path == '/calendar/'){ // if event does not have an internal page ($event_path still is the default), link to its external page
    return l($cal['title'], 'http://event.uchicago.edu/maincampus/detail.php?guid=' . $cal['uid']);
  }
  return l($cal['title'], $event_path);
}

/**
 * Generates a teaser item list data array suitable for passing to theme_item_list
 */
function hum_bedework_block_generate_teaser_list() {
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));

  $ret = array(
    'items' => array(),
    'empty' => 'No Events Found',
    'type' => 'ol',
    'class' => 'bedework_list_teaser',
  );
        
  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_teaser_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'teaser');
    $time = $timevals['time'];
    $date = $timevals['sdate']; 

    $ret['items'][] = array(
      'data'=>'',
      'class'=>array('bedework_list_event'),
      'children'=>array(
          array(
              'data'=>hum_bedework_generate_event_link($cal),
              'class'=>array('bedework_list_title'),
          ),
          array(
              'data'=>"<span class='bedework_list_date'>{$date}</span> <span class='bedework_list_time'>{$time}</span>",
              'class'=>array('bedework_list_datetime'),
          ),
          array(
              'data'=>$cal['location'],
              'class'=>array('bedework_list_location'),
          ),
      )
    );
  }

  if (count($ret['items']) > 0) {
    $ret['items'][] = array(
        'data'=>l("More",variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH)),
        'class'=>array('bedework_more')
    );
  }

  return $ret;
}

/**
 * This is the page callback for the main calendar. It performs dispatching functionality based
 * on the arguments and configuration settings.
 */
function hum_bedework_main_page($arg1 = NULL, $arg2 = NULL) {
  // Check if this is a details page and if so draw that using the guid in arg2 
  if ($arg1 == "details") {
    return hum_bedework_details_page($arg2);
  } else {
    // for all others assume we are drawing the main calendar page. Figure out what style that is
    // and call the appropriate handler.
    switch (variable_get('hum_bedework_main_style',HUM_BEDEWORK_DEFAULT_MAIN_STYLE)) {
      case 'table':
        return hum_bedework_table_page();
      case 'month':
        return hum_bedework_month_page($arg1, $arg2);
    }
  }

}

/*
 * Displays all events in a single table
 */
function hum_bedework_table_page() {
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));

  $table = array(
    'header' => array(
      'Date / Time',
      'Title / Location',
      'Description'
    ),
    'rows' => array(),
    'empty' => 'No Events Found'
  );
        
  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_main_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'main');
  
    $time = $timevals['time'];
    $date = $timevals['sdate_dur'];

    $desc = str_replace("\\n","<br />",mb_substr($cal['description'],0,variable_get('hum_bedework_main_desc_trim',"200"),'utf-8'))
            . (mb_strlen($cal['description'],'utf-8') > variable_get('hum_bedework_main_desc_trim',"200") ? "..." : "");

    $table['rows'][] = array(
      'data' => array(
        array(
          'data'=>"<span class='bedework_date'>$date</span><br /><span class='bedework_time'>$time</span>",
          'class'=>'bedework_datetime'
        ),
        hum_bedework_generate_event_link($cal).'<br />'.$cal['location'],
        $desc
      )
    );
  }

  $content = "";
  $content .= "<h1>Calendar</h1>";
  $content .= theme('table',$table);

  return $content;
}

/*
 * checks if an event is an 'ongoing' event (longer than 1 day)
 * returns length of event in days
 */
function ongoing_event($timevals) {
  
  $start = $timevals['sdate'];
  $start_dt = new DateTime($start);
  $end = $timevals['edate'];
  $end_dt = new DateTime($end);

  $svals = (date_parse_from_format('F d, Y', $start));
  $evals = (date_parse_from_format('F d, Y', $end));
  
  $diff = '';
  $days = 0;
  if (($evals['year'] >= $svals['year'] && $evals['month'] > $svals['month']) || 
    ($evals['year'] >= $svals['year'] && $evals['month'] == $svals['month'] && $evals['day'] > $svals['day'])) {
    $diff = date_diff($start_dt,$end_dt);
    $days = $diff->d;
  } 
  
  return $days;
}

/*
 * draws the ongoing event table given a list of events
 */ 
function draw_ongoing_event_table($events) {

  $table = array(
    'header' => array(
      'Date',
      'Time',
      'Title / Location'
    ),
    'rows' => array(),
    'empty' => 'No Events Found'
  );

  foreach ($events as $e) {
    $time = $e['0']['time'];
    $sdate = $e['0']['sdate'];
    $edate = $e['0']['edate'];

    $table['rows'][] = array(
        'data' => array(
          array('data'=>"<span class='bedework_date'>$sdate - $edate</span>",'class'=>'bedework_datetime'),
          array(
            'data'=>"<span class='bedework_time'>$time</span>",
            'class'=>'bedework_datetime'
          ),
          hum_bedework_generate_event_link($e).'<br />'.$e['location']
        )
      );
  }

  $content = "";
  $content .= "<h2>Ongoing Events</h2>";
  $content .= theme('table',$table);
  
  return $content;
}

/*
 * 
 */
function draw_current_event_table_helper($curr_events, $t) {

  $table = array(
    'header' => array(
      'Date',
      'Time',
      'Title / Location'
    ),
    'rows' => array(),
    'empty' => 'No Events Found'
  );

  $prev_date = null;

  foreach ($curr_events as $event) {
    $timevals = hum_bedework_sanitize_time($event,'main');
    $time = $timevals[$t];
    $date = $timevals['sdate']; 

    if ($date != $prev_date) {
      $printDate = array('data'=>"<span class='bedework_date'>$date</span>",'class'=>'bedework_datetime');
    } else {
      $printDate = null;
    }

    $table['rows'][] = array(
      'data' => array(
        $printDate,
          array(
            'data'=>"<span class='bedework_time'>$time</span>",
            'class'=>'bedework_datetime'
          ),
          hum_bedework_generate_event_link($event).'<br />'.$event['location']
        )
      );

    $prev_date = $date;
  }

  $content = "";
  $content .= theme('table',$table);
  
  return $content;
}

/*
 * draws the current event table given a list of events
 */ 
function draw_current_event_table($curr_events) {

  $display_endtime = variable_get('hum_bedework_main_end_time_display',HUM_BEDEWORK_DEFAULT_MAIN_END_TIME_DISPLAY);
    
  return ($display_endtime) ? draw_current_event_table_helper($curr_events, 'time') : draw_current_event_table_helper($curr_events, 'stime');
}

/*
 * Returns a 2D array for regular and ongoing events
 */
function get_event_list($year, $month) {
  $caldat = hum_bedework_get_cal_data(variable_get('hum_bedework_api_key',''),variable_get('hum_bedework_main_widget_id',''));
  $all_events = array();
  $prev_date = null;
  $today = date('F d, Y');
  $curr_events = array();
  $ongoing_events = array();

  for ($i = 0; $i < min(count($caldat),variable_get('hum_bedework_main_event_count',count($caldat))); $i++){
    $cal = $caldat[$i];

    $timevals = hum_bedework_sanitize_time($cal,'main');
    $date = $timevals['sdate'];
    $end_date = $timevals['edate'];

    $datevals = (date_parse_from_format('F d, Y', $date));
    $end_datevals = (date_parse_from_format('F d, Y', $end_date));
    $m = $datevals['month']; //returns numerical representation of month (1-12)
    $end_m = $end_datevals['month'];
    $y = $datevals['year'];
    $end_y = $end_datevals['year'];
    $day = $end_datevals['day'];
    $e_len = ongoing_event($timevals);

    if ($m == $month && $y == $year) { //this assumes that events will be removed from cal when over
      //add this event to our list
      if ($e_len >= 1 && $day >= $today['day']) {
        //ongoing event
        array_push($cal,$timevals);
        array_push($ongoing_events, $cal);
      } else {
        //regular event 
        array_push($curr_events, $cal);
      }
    } else if ($end_m >= $month && $end_y >= $year
                && $m <= $month && $y <= $year && $day >= $today['day'] && $e_len >= 1) { 
      //check if ongoing event from prev month ends in this or future month
      array_push($cal,$timevals);
      array_push($ongoing_events, $cal);
    }
  }

  //sort events for current month
  uasort($curr_events, 'cmp_date');

  array_push($all_events, $curr_events);
  array_push($all_events, $ongoing_events);
  
  return $all_events;
}

/*
 * remove duplicate ongoing events (in the case more than 1 month is displayed)
 */
function remove_duplicates($events) {
  $rv = array();
  $len = count($events);
  if ($len) {
    array_push($rv, $events[0]);
    for ($i = 0; $i < $len;$i++) {
      $rv_len = count($rv);
      for ($j = 0; $j < $rv_len; $j++) {
        if (!(in_array($events[$i],$rv))) {
          array_push($rv, $events[$i]);
        }
      }
    }
  }
  return $rv;
}

/*
 * returns prev and next dates for given month and year
 */
function compute_prev_next_months($month, $year) {
  $prev_month = $month;
  $prev_year = $year;
  $next_month = $month;
  $next_year = $year;

  if ($month == 1) { 
    $prev_month = 12;
    $prev_year = $year - 1;
    $next_month = $month + 1; 
  } else if ($month == 12) { 
    $next_month = 1;
    $next_year = $year + 1;
    $prev_month = $month - 1;
  } else { 
    $next_month = $month + 1;
    $prev_month = $month - 1;
  }
  return array($prev_month, $prev_year, $next_month, $next_year);
}

/*
 * option to display additional events from future months
 * if desired display number has not been reached
 */
function adjust_event_list($curr_events, $ongoing_events, $month, $year, 
                          $prev_month, $prev_year, $next_month, $next_year) {

  $display_num = variable_get('hum_bedework_main_event_display',HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY);
  $display_percent = variable_get('hum_bedework_main_event_display_range',HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY_RANGE);
  if ($display_percent == 0) {
    $display_percent = HUM_BEDEWORK_DEFAULT_MAIN_EVENT_DISPLAY_RANGE;
  }

  $num_events = count($curr_events) + count($ongoing_events);
  $additional_events = null;
  $additional_num = 0;

  $month_name = date('F', mktime(0,0,0,$month,1));
  $title = "<h1>Calendar: $month_name $year</h1>";

  $range = $display_num * $display_percent;
  while ($num_events < $display_num) {
    //add more events
    $additional_events = get_event_list($next_year, $next_month);
    $additional_num = count($additional_events[0]) + count($additional_events[1]);
    if ($num_events + $additional_num <= $display_num + $range && $additional_num != 0 ||
        $num_events + $additional_num >= $display_num - $range && $additional_num != 0) {
      //append additional events to current event list
      $curr_events = array_merge($curr_events, $additional_events[0]);
      $ongoing_events = array_merge($ongoing_events, $additional_events[1]);
      $next_month_name = date('F', mktime(0,0,0,$next_month,1));
      $title = "<h1>Calendar: $month_name $year - $next_month_name $next_year</h1>";
      //get next month, year in case we still don't have enough events -- there's prob more efficient way to do this
      $next_dates = compute_prev_next_months($next_month, $next_year);
      $next_month = $next_dates[2];
      $next_year = $next_dates[3];
      $num_events += $additional_num;
    } else {
      break; //num of events is as close to desired num as it's going to get
    }
  }
  //need to return: curr_events, ongoing & title
  return array($title, $curr_events, $ongoing_events, $next_month, $next_year);
}

/*
 * displays cal page by month for given month, year
 * defaults to current month, year
 */
function hum_bedework_month_page($year, $month) {

  if ($year === NULL) {
    $year = HUM_BEDEWORK_DEFAULT_YEAR;
  }

  if ($month === NULL) {
    $month = HUM_BEDEWORK_DEFAULT_MONTH;
  }

  $all_events = get_event_list($year, $month);
  $curr_events = $all_events[0];
  $ongoing_events = $all_events[1];

  //compute previous and next months
  $computed_dates = compute_prev_next_months($month, $year);
  $prev_month = $computed_dates[0];
  $prev_year = $computed_dates[1];
  $next_month = $computed_dates[2];
  $next_year = $computed_dates[3];

  $adjusted_events = adjust_event_list($curr_events, $ongoing_events, $month, $year, $prev_month, $prev_year, $next_month, $next_year);
  $title = $adjusted_events[0];
  $curr_events = $adjusted_events[1];
  $ongoing_events = $adjusted_events[2];
  $next_month = $adjusted_events[3];
  $next_year = $adjusted_events[4];

  $ongoing_events = remove_duplicates($ongoing_events);
  uasort($ongoing_events, 'cmp_date_ongoing');
  
  $calendar_path = variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH);
  //stop previous month link from showing if prev date is before current date
  $current_month = HUM_BEDEWORK_DEFAULT_MONTH;
  $current_year = HUM_BEDEWORK_DEFAULT_YEAR;
  $prev;
  if($month == $current_month && $year == $current_year) {
    $prev = '';
  } else {
    $prev = l(date('F Y',mktime(0,0,0,$prev_month,1,$prev_year)), $calendar_path . '/' . $prev_year . '/' . $prev_month) . ' -';
  }
  $next = l(date('F Y',mktime(0,0,0,$next_month,1,$next_year)), $calendar_path . '/' . $next_year . '/' . $next_month);

  $current = '';
  if (count($curr_events)) { //hide table if no events--it looks cleaner?
    $current = draw_current_event_table($curr_events);
  } else {
    $current = '<h2>No Events Found</h2>';
  }

  $ongoing = '';
  if (count($ongoing_events)) {
    $ongoing = draw_ongoing_event_table($ongoing_events);
  }

  $content = "";
  $content .= $title;
  $content .= $current;
  $content .= $ongoing;
  $content .= "<p class=\"bedework_main_calendar_link\">$prev $next</p>";

  return $content;
}

function hum_bedework_details_page($guid='') {
  $cal = hum_bedework_get_cal_event($guid);
  
  $table = array(
    'attributes' => array('class' => 'hum_bedework_detail_table'),
    'rows' => array(),
    'empty' => 'Event not found'
  );
  
  $timevals = hum_bedework_sanitize_time($cal,'main');
  
  $desc = str_replace("\\n","<br />",$cal['description']);

  $table['rows'][] = array(
    'data' => array(
      array('data'=>'When','class'=>'bedework_label'),
      $timevals['duration_datetime']
    )
  );

  $table['rows'][] = array(
    'data' => array(
      array('data'=>'Where','class'=>'bedework_label'),
      $cal['location']
    )
  );
  
  if ($cal['url'] != "") {
      $table['rows'][] = array(
        'data' => array(
          array('data'=>'Event Website','class'=>'bedework_label'),
          l( wordwrap($cal['url'], 100), $cal['url'])
        )
      );
  }
  
  if ($cal['contact'] != "") {
      $table['rows'][] = array(
        'data' => array(
          array('data'=>'Contact Information', 'class'=>'bedework_label'),
          $cal['contact']
        )
      );
  }
  
  $table['rows'][] = array(
    'data' => array(
      array('data'=>'Description','class'=>'bedework_label'),
      $desc
    )
  );

  if ($cal['categories'] != null) {//hide if event does not have categories
    $length = sizeof($cal['categories']);
    $category_list = "";
    
    for($i=0;$i<$length;$i++){
      $cat = $cal['categories'][$i];//current category
      $cmp = strcmp($cat,'Suppress from Main Campus');//hide 'Suppress...' category
      if(strcmp($category_list,'') == 0 && $cmp != 0){//if no prev categories no comma
        $category_list = $cal['categories'][$i];
      } else if($cmp != 0){
        $category_list = $category_list . ", " . $cal['categories'][$i];
      }
    }
    if(strcmp($category_list,'') !=0){//hide category label if string is empty
      $table['rows'][] = array(
      'data' => array(
        array('data'=>'Categories', 'class'=>'bedework_label'),
        $category_list
        )
      );
    }
  }

  $calendar_path = variable_get('hum_bedework_main_calendar_path', HUM_BEDEWORK_DEFAULT_MAIN_CALENDAR_PATH);

  $content = "";
  $content .= "<h1>{$cal['title']}</h1>";
  $content .= theme('table',$table);
  $content .= "<p class='bedework_main_calendar_link'>".l('Back to main calendar', $calendar_path)."</p>";

  return $content;
}

/**
 * Queries the bedework server for a list of events given a calendar
 * api key and id
 *
 * @return An array of event data arrays
 */
function hum_bedework_get_cal_data($key,$id) {
  // TODO: perform this HTTP fetch using drupal http features so it works
  // through the proxy modules, etc
  $config = array(
    'unique_id' => 'hum_bedework',
    'url' => "http://event.uchicago.edu/widgets/ics.php?key=$key&id=$id"
  );
  $vcalendar = new vcalendar($config);
  $vcalendar->parse();

  $caldat = array();

  while ($e = $vcalendar->getComponent('vevent')) {
    $caldat[] = hum_bedework_parse_cal_event($e);;
  }
  
  return $caldat;
}

/**
 * Queries the bedework server for a specific event based on a
 * bedework guid
 *
 * @return An event data array
 */
function hum_bedework_get_cal_event($guid) {
  $config = array(
    'unique_id' => 'hum_bedework',
    'url' => "http://event.uchicago.edu/cal/misc/export.gdo?b=de&subid=11&calPath=%2Fpublic%2FuChicago&guid={$guid}&recurrenceId=20120903T183000Z&nocache=no&contentName={$guid}.ics"
  );

  $vcalendar = new vcalendar($config);
  $vcalendar->parse();

  $event = $vcalendar->getComponent('vevent');

  if ($event) {
    return hum_bedework_parse_cal_event($event);
  } else {
    // TODO: problem
    return array();
  }
}

/**
 * Parse an iCalendar array into a bedework event data array.
 * 
 * @param e An iCalendar PHP object produced by iCalcreator
 *
 * @return A bedework event data array 
 */
function hum_bedework_parse_cal_event($e) {
    $el = array();

    $el['title'] = $e->summary['value'];
    $el['location'] = $e->location['value'];
    $el['uid'] = $e->uid['value'];
    
    if (is_array($e->url)) {
        $el['url'] = $e->url['value'];
    } else {
        $el['url'] = "";
    }

    if (is_array($e->description)) {
      $el['description'] = $e->description[0]['value'];
    } else {
      $el['description'] = "";
    }
    
    if (is_array($e->contact)) {
      $el['contact'] = $e->contact[0]['value'];
    } else  {
      $el['contact'] = "";
    }

    if (is_array($e->categories)) {
      $length = sizeof($e->categories);
      for($i=0;$i<$length;$i++){
        $el['categories'][$i] = $e->categories[$i]['value'];
      }
    } else {
      $el['categories'] = "";
    }
  
    // var_dump($e); 

    $st = array();

    if (is_array($e->dtstart)) {
      $el['st_exists'] = true;
      
      // Check if this is a full datetime or just a date. If a date, fill in 0s for time.
      if (is_array($e->dtstart['params']) && array_key_exists('VALUE',$e->dtstart['params']) && $e->dtstart['params']['VALUE'] == "DATE") {
        $st['hour'] = 0;
        $st['min'] = 0;
        $st['sec'] = 0;
      } else {
        $st['hour'] = $e->dtstart['value']['hour'];
        $st['min'] = $e->dtstart['value']['min'];
        $st['sec'] = $e->dtstart['value']['sec'];
      }

      $st['year'] = $e->dtstart['value']['year'];
      $st['month'] = $e->dtstart['value']['month'];
      $st['day'] = $e->dtstart['value']['day'];

      $el['st_ts'] = mktime(
        $st['hour'],$st['min'],$st['sec'],
        $st['month'],$st['day'],$st['year']
      );
    } else {
      $el['st_exists'] = false;
    }
    
    $et = array();
    if (is_array($e->dtend)) {
      if (is_array($e->dtend['params']) && array_key_exists('VALUE',$e->dtend['params']) && $e->dtend['params']['VALUE'] == "DATE") {
        $et['hour'] = 0;
        $et['min'] = 0;
        $et['sec'] = 0;
      } else {
        $et['hour'] = $e->dtend['value']['hour'];
        $et['min'] = $e->dtend['value']['min'];
        $et['sec'] = $e->dtend['value']['sec'];
      }
      $et['year'] = $e->dtend['value']['year'];
      $et['month'] = $e->dtend['value']['month'];
      $et['day'] = $e->dtend['value']['day'];

      $el['et_exists'] = true;

      $el['et_ts'] = mktime(
        $et['hour'],$et['min'],$et['sec'],
        $et['month'],$et['day'],$et['year']
      );

      $el['et_ts_adj'] = mktime(
        $et['hour'],$et['min'],$et['sec'],
        $et['month'],$et['day']-1,$et['year']
      );
    } else if (is_array($e->duration) && $el['st_exists']) {
      // Calculate end time based on duration
      $et['hour'] = (array_key_exists('hour',$e->duration['value']) ? $st['hour']+$e->duration['value']['hour'] : $st['hour']);
      $et['min'] = (array_key_exists('min',$e->duration['value']) ? $st['min']+$e->duration['value']['min'] : $st['min']);
      $et['sec'] = (array_key_exists('sec',$e->duration['value']) ? $st['sec']+$e->duration['value']['sec'] : $st['sec']);
      $et['month'] = (array_key_exists('month',$e->duration['value']) ? $st['month']+$e->duration['value']['month'] : $st['month']);
      $et['day'] = (array_key_exists('day',$e->duration['value']) ? $st['day']+$e->duration['value']['day'] : $st['day']);
      $et['year'] = (array_key_exists('year',$e->duration['value']) ? $st['year']+$e->duration['value']['year'] : $st['year']);
          
      $el['et_ts'] = mktime(
        $et['hour'],$et['min'],$et['sec'],
        $et['month'],$et['day'],$et['year']
      );

      $el['et_ts_adj'] = mktime(
        $et['hour'],$et['min'],$et['sec'],
        $et['month'],$et['day']-1,$et['year']
      );

      $el['et_exists'] = true;
    } else {
      $el['et_exists'] = false;
    }
    
    // Check if start and end time are the same?
    if ($el['st_exists'] && $el['et_exists']) {
        // If the start and end dates match then set samedate flag
        // Check for the case of an all day event that lasts exactly one day
        if (($st['year'] == $et['year'] && $st['month'] == $et['month'] && $st['day'] == $et['day']) || $el['st_ts'] == $el['et_ts_adj']) {
            $el['samedate'] = true;
        } else {
            $el['samedate'] = false;
        }

        if ($st['hour'] == $et['hour'] && $st['min'] == $et['min'] && $st['sec'] == $et['sec']) {
            $el['sametime'] = true;
        } else {
            $el['sametime'] = false;
        }
    } else {
        $el['samedate'] = true;
        $el['sametime'] = false;
    }
    
    // All day events start and end at 00:00:00. The start day is the first day. The end day
    // is the day after the last day.
    if ($el['sametime'] && $st['hour'] == 0 && $st['min'] == 0 && $st['sec'] == 0) {
        $el['allday'] = true;
    } else {
        $el['allday'] = false;
    }

    return $el;
}

function get_date_part($part) {
  $today = date_parse(date('F d, Y'));
  return $p = $today[$part];
}

